{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "id": "https://raw.github.com/nilmtk/nilm_metadata/master/schema/appliance.json",
    "title": "Appliance",
    "description": "Metadata for an Appliance",
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "name": { "type": "string" },
        "instance": { "$ref": "instance.json" },
        "room_id": { "$ref": "room.json" },
        "meter_ids": { 
            "type": "array", 
            "items": { "$ref": "instance.json" },
            "unique": true,
            "description": "An array of the meter ID(s) used to monitor this appliance."
        },
        "dates_active": {
            "type": "array",
            "items": { "$ref": "timeframe.json" }
        },
        "manufacturer": { "type": "string" },
        "model": { "type": "string" },
        "part_number": { "type": "string" },
        "gtin": { 
            "type": "integer", 
            "description": "http://en.wikipedia.org/wiki/Global_Trade_Item_Number" 
        },
        "categories": { 
            "type": "array",
            "items": { 
                "enum": [
                    "small", "large",

                    "cooking", "washing/drying", "cold", "hot", "wet",
                    "climate control",
                    "space heating", "space cooling", 
                    "water heating", "showers",
                    "lighting",

                    "ict", "computers", "entertainment", "office",

                    "tools", "other"
                ]
            },
            "description": "synonyms: large=white goods; small=brown goods; "
        },
        "on_power_threshold": { 
            "type": "number", 
            "description": "watts", 
            "minimum": 0
        },
        "minimum_off_duration": { "type": "number", "description": "seconds" },
        "minimum_on_duration": { "type": "number", "description": "seconds" },
        "control": { 
            "type": "array",
            "items": { "enum": [ 
                "timer", "manual", "motion sensor", "light sensor",
                "temperature sensor"] },
            "description": "Give a list of all control methods which apply.  For example, a video recorder would be both 'manual' and 'timer'."
        },
        "energy_rating": { "type": "string" },
        "nominal_consumption": {             
            "type": "object",
            "properties": {
                "on_power": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "description": "active power in watts when on" 
                },
                "standby_power": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "description": "active power in watts when in standby" 
                },
                "energy_per_year": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "description": "kWh per year" 
                }
            }
        },
        "images": { 
            "type": "array", 
            "items": { "type": "string", "format": "uri" } 
        },
        "additional_properties": {
            "type": "object",
            "description": "JSON-Schema describing additional properties"
        },
        "parent": {
            "type": "string",
            "description": "Key of parent object"
        },
        "distributions": {
            "type": "object",
            "description": "Distributions of the data expressed as normalised frequencies over discrete intervals (bins).",
            "properties": {
                "on_power": {
                    "allOf": [
                        { "$ref": "#/definitions/array_of_priors" },
                        { "description": "e.g. '0:0.0, 1:0.5, 2:0.25, 3:0.25, 4:0' meaning the bin from [0,1) has 0 mass; the bin [1,2) has 0.5 mass etc. Watts" }
                    ]
                },
                "on_duration": { 
                    "allOf": [
                        { "$ref": "#/definitions/array_of_priors" },
                        { "description": "e.g. '0:0.2, 100:0.1, 200:0.0, ...'. Meaning the bin from [0,100) seconds has 0.2 mass, the bin from [100,200) has 0.1 mass etc" }
                    ]
                },
                "off_duration": { 
                    "allOf": [
                        { "$ref": "#/definitions/array_of_priors" },
                        { "description": "e.g. '0:0.2, 100:0.1, 200:0.0, ...'. Meaning the bin from [0,100) seconds has 0.2 mass, the bin from [100,200) has 0.1 mass etc" }
                    ]
                },
                "usage_hour_per_day": { 
                    "allOf": [
                        { "$ref": "#/definitions/array_of_priors" },
                        { "description": "e.g. '0:0.2, 1:0.1, 2:0.0, ..., 23:0.0'" }
                    ]
                },
                "usage_day_per_week": { 
                    "allOf": [
                        { "$ref": "#/definitions/array_of_priors" },
                        { "description": "e.g. 'mon:0.2, tue:0.1, wed:0.0, ...'" }
                    ]
                },
                "usage_month_per_year": { 
                    "allOf": [
                        { "$ref": "#/definitions/array_of_priors" },
                        {}
                    ]
                },
                "rooms": { 
                    "allOf": [
                        { "$ref": "#/definitions/array_of_priors" },
                        { "description": "Distribution over the rooms where this appliance is likely to be used. e.g. for a fridge this might be 'kitchen:0.9, garage:0.1'" }
                    ]
                },
                "appliance_correlations": { 
                    "allOf": [
                        { "$ref": "#/definitions/array_of_priors" },
                        { "description": "list of other appliances. Probability of this appliance being on given that the other appliance is on. e.g. 'tv:0.1, amp:0.4, ...' means that there is a 10% probability of this appliance being on if the TV is on." }
                    ]
                }
            }
        }
    },
    "components": {
        "screen": {
            "type": "object",
            "properties": {
                "diagonal_size": { 
                    "type": "number",
                    "description": "diagonal size in inches",
                    "minimum": 0,
                    "exclusiveMinimum": true
                },
                "max_resolution": { 
                    "type": "object",
                    "properties": {
                        "horizontal": { "type": "integer" },
                        "vertical": { "type": "integer" }
                    }
                },
                "display_format": { 
                    "type": "string", 
                    "description": "e.g. <1080p,PAL,NTSC,1080i> etc." 
                },
                "max_refresh_rate": { "type": "number", "description": "Hz" },
                "display_technology": { 
                    "enum": [
                        "crt", "lcd", "plasma", "oled", "projector" ] 
                },
                "backlight_technology": { "enum": ["led", "cold cathode"] }
            }
        },
        "av_sources": {
            "type": "array",
            "items": { 
                "enum": [
                    "digital tv", "analogue tv",
                    "videodisc", "cd", "dvr", "dvd", "blu-ray",
                    "tape",
                    "analogue radio", "digital radio", 
                    "satellite", "cable", "broadband", "fibre"
                ]
            }
        },
        "cooking": {
            "type": "object",
            "properties": {
                "name": { "enum": [ "oven", "hob", "grill" ] },
                "fuel": { "$ref": "#/definitions/fuel" },
                "fan": { "type": "boolean" }
            }
        }
    },
    "definitions": {
        "array_of_priors": {
            "type": "array",
            "items": { "$ref": "prior.json" }
        },
        "fuel": { 
            "enum": [ 
                "electricity", "gas", "oil", "coal", "wood", "biomass" 
            ] 
        }
    }
}
