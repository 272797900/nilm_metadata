# The Idea:
The schema in the schema directory describes the complete schema for meters and
appliances.

To assemble this complete data per appliance/meter in-memory, we traverse
the following hierarchy.  i.e. if we find an appliance instance 
which is a subtype of "Refrigeration:Samsung:RSH7UNBP" then we first
follow the tree to the top.  Then, starting from the top, we form a set of
key:value pairs where subclasses override previous values (just use dict.update).


TODO:

* look at JavaScript inheritance mechanism
* Look again at SQLite.  EER generalisation. Can't do inheritance?
  Lots of empty fields?
* Move all information from schema/appliance_old.json to classes/appliance_classes.json
* Get it working with appliance_catalogue
* Build functionality so we can just specify the name and find the
  class from the name.
* Do data for meters, using same pattern
* Building schema
* Dataset schema.
  * where to find a canonical list of country names?
  * look at http://schema.datacite.org/
  * and look at UKERC EDC's schemas
* come up with a canonical list of categories:
  * ones used in HES
  * ones used in wikipedia
* Test it out on HES
* Write my UKPD metadata
* Write docs
* Make it work with nilmtk



DONE:

* Build the code to traverse the class hierarchy 
